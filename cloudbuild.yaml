options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _IMAGE_NAME: "gcr.io/${PROJECT_ID}/gcpdevops-prod:${SHORT_SHA}"
  _CLUSTER_NAME: "lnu-jti-staging-autopilot-cluster"
  _NAMESPACE: "just-task-it"
  _LOCATION: "europe-north2"

steps:
  # Step 1: Build Docker image with SHA-based tagging
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-f', 'Dockerfile.production', '-t', '${_IMAGE_NAME}', '.']

  # Step 2: Push Docker image to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_IMAGE_NAME}']

    # 2) Installera Kompose (binär från GitHub release)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -c
      - |
        curl -L https://github.com/kubernetes/kompose/releases/download/v1.37.0/kompose-linux-amd64 -o kompose
        chmod +x kompose

  # 3) Konvertera docker-compose → manifester
  #    Vi skriver allt till ETT yaml-dokument (kind: List) så det är lätt att applicera.
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -c
      - |
        mkdir -p gke/generated
        /workspace/kompose convert -f docker-compose.yaml -f docker-compose.production.yaml --stdout > gke/generated/komposed.yaml

    # Step 3: Replace placeholder `just-task-it:latest` in `komposed.yaml` with actual image name 
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - "-c"
      - |
        sed -i "s|just-task-it:latest|${_IMAGE_NAME}|g" gke/generated/komposed.yaml
        sed -i '/hostPort/d' gke/generated/komposed.yaml
        sed -i 's/imagePullPolicy: Never/imagePullPolicy: Always/g' gke/generated/komposed.yaml
        awk '/port:/ && !/name:/ {gsub(/^[[:space:]]*- port:/, "  - name: port\n    port:"); print; next} {print}' gke/generated/komposed.yaml > gke/generated/komposed.tmp && mv gke/generated/komposed.tmp gke/generated/komposed.yaml
        # Add fsGroup to grafana deployment so it can write to /var/lib/grafana
        sed -i '/name: grafana/{N; /kind: Deployment/!b; :a; N; /^spec:.*template:/!ba; s/template:/template:\n      spec:\n        securityContext:\n          fsGroup: 472\n    /;}' gke/generated/komposed.yaml

  # Cleanup previous gke-deploy outputs to avoid conflicts
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - "-c"
      - |
        rm -rf output || true

  # 5a) Deploy FAS 1: manuella prereqs (namespace, secrets, configmaps, pvcs, crds, osv)
  - name: "gcr.io/cloud-builders/gke-deploy"
    args:
      - run
      - --location=${_LOCATION}
      - --cluster=${_CLUSTER_NAME}
      - --namespace=${_NAMESPACE}
      - --filename=k8s/gke

  # # Cleanup previous gke-deploy outputs before second deploy
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   entrypoint: 'bash'
  #   args:
  #     - "-c"
  #     - |
  #       rm -rf output || true

  # # 5b) Deploy FAS 2: kompose-genererat (och ev. övriga manuella resurser som inte är prereqs)
  # - name: "gcr.io/cloud-builders/gke-deploy"
  #   args:
  #     - run
  #     - --image=${_IMAGE_NAME}
  #     - --location=${_LOCATION}
  #     - --cluster=${_CLUSTER_NAME}
  #     - --namespace=${_NAMESPACE}
  #     - --filename=gke/generated/

  # Apply kompose-generated resources and show diagnostics
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - "-c"
      - |
        gcloud container clusters get-credentials ${_CLUSTER_NAME} --region ${_LOCATION}
        kubectl delete pod/just-task-it -n ${_NAMESPACE} --ignore-not-found || true
        kubectl apply -f gke/generated/ --namespace=${_NAMESPACE}
        sleep 10
        # Fix grafana permissions - add fsGroup so it can write to volumes
        kubectl patch deployment grafana -n ${_NAMESPACE} -p '{"spec":{"template":{"spec":{"securityContext":{"fsGroup":472}}}}}' --type merge || true
        sleep 10
        echo "=== POD STATUS ==="
        kubectl -n ${_NAMESPACE} get pods -o wide || true
        echo "=== EVENTS ==="
        kubectl -n ${_NAMESPACE} get events --sort-by=.lastTimestamp | tail -n 50 || true
        echo "=== POD DESCRIBE ==="
        kubectl -n ${_NAMESPACE} describe pod just-task-it || true
        echo "=== POD LOGS ==="
        kubectl -n ${_NAMESPACE} logs pod/just-task-it --all-containers || true
        echo ""
        echo "=== GRAFANA LOGS ==="
        kubectl -n ${_NAMESPACE} logs deployment/grafana --all-containers --tail=100 || true
        echo ""
        echo "=== TELEGRAF LOGS ==="
        kubectl -n ${_NAMESPACE} logs pod/telegraf --all-containers --tail=100 || true
        echo ""
        echo "=== TELEGRAF POD DESCRIBE ==="
        kubectl -n ${_NAMESPACE} describe pod telegraf || true
        echo ""
        echo "=== RECENT TELEGRAF EVENTS ==="
        kubectl -n ${_NAMESPACE} get events --sort-by=.lastTimestamp | grep telegraf | tail -20 || true
        echo ""
        echo "=== LOADBALANCER SERVICE ==="
        kubectl -n ${_NAMESPACE} get svc just-task-it-loadbalancer -o wide || true
        echo ""
        echo "=== SERVICE DETAILS ==="
        kubectl -n ${_NAMESPACE} describe svc just-task-it-loadbalancer || true
        sleep 5
        echo ""
        echo "=== DEPLOYMENT COMPLETE ==="
        echo "Just-Task-It is running at: http://\$(kubectl -n ${_NAMESPACE} get svc just-task-it-loadbalancer -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):80"
        kubectl apply -f k8s/gke/grafana-service.yaml
        sleep 10
        echo "Grafana is running at: http://\$(kubectl -n ${_NAMESPACE} get svc grafana-loadbalancer -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):3000"
        echo ""
        echo "=== FINAL POD STATUS ==="
        kubectl -n ${_NAMESPACE} get pods -o wide || true
        echo ""
        echo "=== SERVICES ==="
        kubectl -n ${_NAMESPACE} get svc -o wide || true