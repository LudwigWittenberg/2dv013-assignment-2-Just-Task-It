# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Build and Deploy to GKE

on:
  push:
    branches:
      - main

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: staging
    
    env:
      PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      IMAGE: ${{ vars.IMAGE }}
      DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }}

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@1bee7de035d65ec5da40a31f8589e240eba8fde5
      with:
        service_account_key: ${{ secrets.SERVICE_GOOGLE_CREDENTIALS }}
        project_id: ${{ vars.GCP_PROJECT_ID }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@db150f2cc60d1716e61922b832eae71d2a45938f
      with:
        cluster_name: ${{ vars.GCP_CLUSTER_NAME }}
        location: ${{ vars.REGION }}
        project_id: ${{ vars.GCP_PROJECT_ID }}
        credentials: ${{ secrets.SERVICE_GOOGLE_CREDENTIALS }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build -f Dockerfile.production \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

    - name: Install Kompose
      run: |-
        curl -L https://github.com/kubernetes-sigs/kompose/releases/download/v1.28.0/kompose-linux-amd64 -o kompose
        chmod +x ./kompose

    - name: Convert Docker Compose to Kubernetes YAML
      env:
      # UPDATE THIS WITH THE ENV VARS YOU NEED
        RABBITMQ_USER: ${{ vars.RABBITMQ_USER }}
        RABBITMQ_PASS: ${{ vars.RABBITMQ_PASS }}
        INFLUXD_BUCKET: ${{ vars.INFLUXD_BUCKET }}
        INFLUXD_ORG: ${{ vars.INFLUXD_ORG }}
        INFLUXD_USERNAME: ${{ vars.INFLUXD_USERNAME }}
        INFLUXD_PASSWORD: ${{ vars.INFLUXD_PASSWORD }}
        INFLUXD_RETENTION: ${{ vars.INFLUXD_RETENTION }}
        INFLUXD_ADMIN_TOKEN: ${{ vars.INFLUXD_ADMIN_TOKEN }}
        DOCKER_INFLUXDB_INIT_MODE: ${{ vars.DOCKER_INFLUXDB_INIT_MODE }}
        RABBIT_QUEUE: ${{ vars.RABBIT_QUEUE }}
        INFLUX_TOKEN: ${{ vars.INFLUXD_ADMIN_TOKEN }}
        INFLUX_URL: ${{ vars.INFLUX_URL }}
        INFLUX_ORG: ${{ vars.INFLUXD_ORG }}
        INFLUX_BUCKET: ${{ vars.INFLUXD_BUCKET }}
        GF_SECURITY_ADMIN_PASSWORD: ${{ vars.GF_SECURITY_ADMIN_PASSWORD }}
        GF_SECURITY_ADMIN_USER: ${{ vars.GF_SECURITY_ADMIN_USER }}
        BASE_URL: ${{ vars.BASE_URL }}
        EXPRESS_APP_PORT: ${{ vars.EXPRESS_APP_PORT }}
        DOCKER_HOST_PORT: ${{ vars.DOCKER_HOST_PORT }}
        SESSION_SECRET: ${{ vars.SESSION_SECRET }}
        DB_CONNECTION_STRING: ${{ vars.DB_CONNECTION_STRING }}
        RABBIT_CONNECTION_STRING: ${{ vars.RABBIT_CONNECTION_STRING }}
        REDIS_URL: ${{ vars.REDIS_URL }}
      run: |-
        ./kompose convert -f docker-compose.yaml -o k8s/gke/kompose/

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        cp ../kustomization.yaml .
        ./kustomize edit set image just-task-it=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl apply -f ../ingress.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
      working-directory: k8s/gke/kompose
